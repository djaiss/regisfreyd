<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Regis Freyd</title>
    <link href="https://regisfreyd.com" />
    <link type="application/atom+xml" rel="self" href="https://regisfreyd.com/blog/feed.atom" />
    <updated>2020-08-15T14:15:48+00:00</updated>
    <id>https://regisfreyd.com/blog/feed.atom</id>
    <author>
        <name>Regis Freyd</name>
    </author>
                <entry>
    <id>https://regisfreyd.com/laravel-test-job-dispatches-other-jobs</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/laravel-test-job-dispatches-other-jobs" />
    <title>How to test that a job dispatches another job in Laravel</title>
    <published>2020-08-15T00:00:00+00:00</published>
    <updated>2020-08-15T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Sometimes, in your Laravel application, you need a job that will dispatch other jobs. For instance, a cron that triggers a job to calculate the activity of all users, and this job triggers a single job for each user.

The only way to know if the second......</summary>
    <content type="html"><![CDATA[
        <p>Sometimes, in your Laravel application, you need a job that will dispatch other jobs. For instance, a cron that triggers a job to calculate the activity of all users, and this job triggers a single job for each user.</p>

<p>The only way to know if the second job gets triggered is to fake the Bus chain, using <code>Queue::fake</code> at the beginning of your tests.</p>

<p>But if you do that, you will only test that the first job get dispatched. It will be dispatched, but not executed - therefore, the secondary jobs won’t be dispatched at all.</p>

<p>How do you test that all the secondary jobs were effectively dispatched?</p>

<script src="https://gist.github.com/djaiss/b59b872832be5027cc9dfca6a776a469.js"></script>

<p>Instead of calling the first job in a more traditional way, like <code>FirstJob()::dispatch()</code>, we need to instantiate it and call both the dispatch() and handle() methods to actually bypass the fact that the first job isn't really dispatched thanks to the calling the Queue::fake() method.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/email-is-not-broken</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/email-is-not-broken" />
    <title>Email is not broken</title>
    <published>2020-08-04T00:00:00+00:00</published>
    <updated>2020-08-04T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">There has been a lot of talks about email being broken since the launch of Hey!.

Why would it be?


Too much spam.
Too many newsletters.
Sluggy or unpolished email clients.


I don&#039;t have any of these problems. Email is not broken at all for me. And I......</summary>
    <content type="html"><![CDATA[
        <p>There has been a lot of talks about email being broken since the launch of Hey!.</p>

<p>Why would it be?</p>

<ul>
<li>Too much spam.</li>
<li>Too many newsletters.</li>
<li>Sluggy or unpolished email clients.</li>
</ul>

<p>I don't have any of these problems. Email is not broken at all for me. And I believe <a href="https://fastmail.com">Fastmail</a> is the main reason why.</p>

<h2>The first rule of email</h2>

<p>First of all, you should never, ever give your email address to people or systems who would use it in a conversation other than a 1-on-1 relationship.</p>

<p>That means to not give your email address:</p>

<ul>
<li>To someone who would put you in a 50 people private mailing list to invite you for a kid’s birthday — of course not in BCC. Very quickly, your email address will be all around the Internet.</li>
<li>To a system, like a newsletter, that will surely resell your data.</li>
<li>To a new site when you create your account, that will also surely resell your data.</li>
</ul>

<h2>If you don't give your email address, what should you do</h2>

<p>This is how I envision the perfect system to never be bothered by unsolicited emails ever again:</p>

<ul>
<li>Your primary email address should only be given to people you absolutely trust.</li>
<li>You need to have one email address per account (or newsletter) that you have. Yes, that means potentially have 400 different email addresses.</li>
<li>If you receive spam, you simply delete this email address from your system and you’ll never be bothered again by this spam.</li>
<li>You need to be able to quickly identify which site leaked your data. To either update the email address with a new one, or insult the site on Twitter.</li>
</ul>

<h2>Aliases: the spam destroyer</h2>

<p>Enter the power of aliases. Fastmail lets you create as many email addresses as you want, that you can use to receive emails. Use those aliases when you sign up somewhere. If you happen to receive spam, or unwanted emails, simply delete the alias, and never hear about the spam ever again.</p>

<p>An email address has two parts: the part before the <code>@</code> symbol (the local-part), and the part after the <code>@</code> symbol (the domain name).</p>

<p>Fastmail lets you enter your own local-part, and provides at least 50 domains to choose from.</p>

<p>The rule is to use a name for this email address that will quickly let you identify which site actually spammed you. You need to follow your own convention to name these aliases. I suggest you follow this: <code>sitename+few letters of your first name + few letters of your last name</code> with one of the 50 domains Fastmail gives you to choose from.</p>

<p>Let’s say you are called Henri Lait. If you had to create an account on Twitter, you could use something like “twitterhenril@sent.as”. On Facebook, “facebookhenril@mms.com”. You get the idea.</p>

<p>Then, when you are spammed by one of these sites, or if they end up being leaked, you simply have to delete this alias and simply move on. The spammer will never know that they can’t reach you again. But you will know which site spammed you, or which site sold your data.</p>

<h2>The drawback</h2>

<p>The only drawback of this system is to set it up in the first place. It can be pretty time consuming to update all existing sites or newsletters with a custom email address for each one of these. Also, you need to create an alias for every new account you will want to use in the future. I believe it’s worth it.</p>

<h2>Conclusion</h2>

<p>Personally, I have more than 500 aliases now. Every one of my account has a custom alias. My spam folder currently has only 2 emails, although is empty, most of the time.</p>

<p>If you use one custom alias per account, and set up 2FA on each one of these, I believe we have one of the most secure system you can find.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/documentation-driven-development</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/documentation-driven-development" />
    <title>Documentation Driven Development</title>
    <published>2020-08-03T00:00:00+00:00</published>
    <updated>2020-08-03T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Documentation is hard and feels unrewarding. Therefore, it’s the last thing you write. When you start your project, you have a high level of motivation and this is how your development cycle looks like:


Write feature
Write tests
Push features to......</summary>
    <content type="html"><![CDATA[
        <p>Documentation is hard and feels unrewarding. Therefore, it’s the last thing you write. When you start your project, you have a high level of motivation and this is how your development cycle looks like:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
<li>Write documentation</li>
<li>Publish documentation</li>
</ul>

<p>After a few months, your motivation starts to decrease and your development cycle looks like this:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
<li>Write documentation</li>
</ul>

<p>Time passes. Your development cycle now looks like this:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
</ul>

<h2>The many benefits of a great documentation</h2>

<p>Documentation is hard to write and hard to maintain. Even more at the end of the feature cycle, when you’ve forgotten all the edge cases you wrote.</p>

<p>It’s sad, because there are actually many benefits of having a great documentation, especially with side projects:</p>

<ul>
<li>It greatly helps the adoption of your project by other developers, as almost no one will work on your tool if you don't provide some kind of documentation.</li>
<li>It’s free marketing. Documentation contains all the keywords necessary for your SEO, and you won’t have to write those shitty blog posts that most internet gurus tell you to write and no one wants to read.</li>
<li>It’s really useful for your users, as most of them are not actually you, therefore needing guidance on how to use your tool.</li>
<li>It reduces the number of customer support tickets you will have to answer to.</li>
</ul>

<p>A complete, well-written documentation is always the sign of a great product. It’s easily the most powerful tool you have at your disposal if you know nothing about marketing and still want to gain some traction. READMEs are also a very powerful marketing tool that I should write about in the future.</p>

<h2>Change how you write softwares</h2>

<p>I suggest to completely change how you write softwares.</p>

<p>Start with the documentation. That means: do not write a single line of code without having completely documented the feature you are about to write.</p>

<p>Then, write the code that supports this documentation, and write tests that match this code. Or write tests then the code if you are fan of TDD — it doesn’t really matter.</p>

<p>Sometimes, tests will show you that you missed something in your documentation. Update it accordingly.</p>

<p>Then push both the code and the documentation to production.</p>

<p>Later on, if you need to modify the feature, start by updating your documentation. Then update your code. Always start with the documentation.</p>

<p>Ideally, you would have a rule in your CI that prevent you from committing a feature without the associated documentation. I don't know how to do it programmatically, but you can simply have a checklist in your pull request template that lets you achieve this goal.</p>

<h2>Final note</h2>

<p>I don't like methodologies in general. Don’t waste time with TDD, BDD and other methodologies that seem to be designed to slow down side projects.</p>

<p>What’s really important is a software</p>

<ul>
<li>That works,</li>
<li>That is really fast,</li>
<li>That has a great documentation so both developers and users will know how to use it.</li>
</ul>

<p>Point 1 is covered by having tests. Write tests, always, but not too many.</p>

<p>Point 2 comes with experience. Making a software fast is a result of a lot of decisions and should be one of your priority, but you will only know how to it well after a few years of struggling with bad code.</p>

<p>Point 3 comes by forcing you to write documentation before you do anything.</p>

<p>Nothing else matters, really.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/how-i-work-2020-edition</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/how-i-work-2020-edition" />
    <title>How I work (2020 edition)</title>
    <published>2020-05-13T00:00:00+00:00</published>
    <updated>2020-05-13T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">As a developer, few things are as important as your setup to help you have productive days. After years of trials and errors, I’m currently in a state where I love every single tool that I use every day.



After years of working with Sublime Text and......</summary>
    <content type="html"><![CDATA[
        <p>As a developer, few things are as important as your setup to help you have productive days. After years of trials and errors, I’m currently in a state where I love every single tool that I use every day.</p>

<h2>Text editor</h2>

<p>After years of working with <a href="https://www.sublimetext.com/">Sublime Text</a> and <a href="https://www.vim.org/">Vim</a>, I've been using VS Code as my primary editor for a couple of years now. Even though it’s built on top of Electron, it’s just great. I agree it’s not as fast as Sublime Text for opening and manipulating files, but the amount of usefulness it brings, whereas as core features or through extensions, is unmatched. I've also tried PHPStorm multiple times, but this IDE tries to do too much and I miss some keyboard shortcuts. I probably could fine tune it to my taste, as I know everything is customizable inside PHPStorm, but I’m a developer, so I’m lazy.</p>

<p>Therefore, VS Code. In the editor, I try to reduce the noise as much as possible. I would never understand why you would need the minimap, for instance. Yes, it’s pretty, but do you need to browse your files that way? Anyway...</p>

<p>Here is a screenshot of my editor.</p>

<p><img src="/assets/img/vscode.png" alt="vscode" /></p>

<h3>Theme</h3>

<ul>
<li>Monokai is my go-to theme. It's not the prettiest, but it has the right readibility/noise ratio that allows me to browse and write code efficiently. It also ships by default with VS Code.</li>
</ul>

<h3>Extensions</h3>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a>: this extension automatically closes HTML tags. Useful when doing front-end stuff.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight">Color Highlight</a>: adds a border of color around every hexadecimal color defined in your CSS. Somewhat useful.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv">DotENV</a>: adds syntax highlighting to .env files. Very useful for all my Laravel projects.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditConfig for VS Code</a>: Adds support to <a href="https://editorconfig.org/">editorconfig files</a>. This lets you maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>: I use for only one feature: the ability to see who last changed the current line, straight inside the editor. It’s an easy way to git blame any lines, basically.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion">IntelliSense for CSS class names in HTML</a>: this provides CSS class name completion in your HTML files. Really useful, especially since I barely write CSS anymore thanks to functional CSS. I've been using functional CSS for 2-3 years now and I couldn't go back to writing regular CSS. Want to know more about it? Read <a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">this awesome article</a> by Adam Wathan or dive into those great CSS frameworks (<a href="https://tachyons.io/">Tachyions</a> and <a href="https://tailwindcss.com/">TailwindCSS</a>).</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=cjhowe7.laravel-blade">laravel-blade</a>: adds syntax highlighting for Laravel's blade.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=AlanWalk.markdown-toc">Markdown TOC</a>: generates table of contents automatically in all the markdown documents I write (specifically <a href="https://github.com/monicahq/monica">Monica's technical documentation</a>).</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker">PHP DocBlocker</a>: this automatically adds the necessary docblocks above your methods as you type <code>/**</code>.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-pack">PHP Extension Pack</a>: contains the core PHP extensions that you need to get PHP up and running in VS Code.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client">PHP Intelephense</a>: The best extension to provide code completion for your PHP. Also, it also imports classes as you type, and this is awesome.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings">Sublime Text Keymap and Settings Importer</a>: because I come from Sublime, there are some texts that I wanted to use in VS Code.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=nonoroazoro.syncing">Syncing</a>: I have multiple computers, and I need to sync my settings, shortcuts, themes and everything else between those machines easily. I use Syncing to achieve this goal. It’s not a popular extension but it works better than the <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">most used one</a>.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a>: adds syntax highlighting and linting to your Vue files.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a>: a set of nice eye-candy icons that I enjoy.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">Wakatime</a>: I've been using Wakatime to automatically track the time I spent in my code editor on a weekly basis. The free plan sends me an email every week about the number of hours I spend in each of my projects. Right now, as everything I do is done on the side, I spend around 20 hours per week on my projects.</li>
</ul>

<h2>Development environment</h2>

<ul>
<li>I develop mainly in PHP, so I use <a href="https://laravel.com/docs/master/valet">Valet</a> to take care of whatever is needed to make everything works locally. I used to run Valet+, but it caused errors when I tried to upgrade the PHP versions.</li>
<li>I use MySQL and SQLite equally. Locally, apps run on MySQL, but test suites are run against SQLite for performance reasons (it’s probably at least 10 times faster). To make sure tests are also working fine with MySQL, I have two GitHub actions, one using MySQL and the other SQLite, that give me an additional peace of mind.</li>
<li>I used to use <a href="https://sequelpro.com/">Sequel Pro</a> to manage databases, but now I use <a href="https://www.tableplus.io/">Table Plus</a> as I have to manage SQLite databases now. Also, Table Plus has constant updates.</li>
<li>I mainly use <a href="https://desktop.github.com/">GitHub Desktop</a> to pull and push changes.</li>
</ul>

<h3>Terminal</h3>

<p>I use <a href="https://www.iterm2.com/">iTerm2</a> as my terminal of choice. It still uses Bash, unfortunately, but I know I’ll have to migrate to ZSH when I’ll migrate to a new computer.</p>

<p><img src="/assets/img/terminal.png" alt="vscode" /></p>

<h3>macOS</h3>

<p>MacOS is my OS of choice. My friends think I’m an Apple fan boy, but it’s not true. I just adore this OS, even though they keep adding stuff that I don't value at all (Twitter and Facebook integration right in the OS – wtf), and removing features that I valued a lot (the ability to switch desktops without animation). But despite those changes, macOS is extremely elegant. No other OSes come close to this level of polish.</p>

<p><img src="/assets/img/desktop.png" alt="vscode" /></p>

<ul>
<li>I don't like dark mode in macOS. So I've simply disabled it entirely.</li>
<li>The dock is always on the left part of the screen, and is always hidden.</li>
<li>I <a href="https://gist.github.com/djaiss/ddf25f26aa62386eeadf18264535288d">disable or change a lot of default features</a> that are in macOS through a bunch of commands run into the terminal.</li>
</ul>

<h3>Softwares</h3>

<ul>
<li>Whenever I can, I install all softwares with <a href="https://github.com/Homebrew/homebrew-cask">brew cask</a>. If you know Homebrew, Cask works in a similar fashion. For instance, to install 1Password, you would just need to run <code>brew cask install 1password</code> and the install process is handled automatically. But the really good part is that you can actually automate this process in a dotfile. That way when you setup a new machine, you just run your script and all is set for you. <a href="https://gist.github.com/djaiss/e46e707769b216402768f1ec1c9d3d2e">This is the script</a> that I use for this purpose.</li>
<li>Speaking of <a href="https://1password.com/">1password</a>. I don't think we have to explain why having a password manager in 2020 is essential. I’ve been a very happy 1password subscriber for years now, and don't plan to switch anytime soon. The app is very elegant, very powerful and gets out of the way.</li>
<li>I use Firefox as my main browser. The dev tools used to lag behind Chrome, but are now much better. Also, privacy.</li>
<li>I don't use todo lists. I've tried them all, but I can't keep up with all the todos so I usually delete the clients one week after installation. I just focus on 1 or 2 tasks and move on.</li>
<li>I use Apple Music as <a href="/apple-music-is-better">it’s much better than Spotify</a>.</li>
<li>I use the official Twitter client.</li>
<li><a href="https://telegram.org/">Telegram</a> is my go-to communication medium with friends and family.</li>
<li>I use Alfred as a task launcher. It’s great, but I don't really need it.</li>
<li>I use <a href="https://www.ergonis.com/products/typinator/">Typinator</a> (a text expander like software) and it’s awesome.</li>
<li>I don't use a VPN, but I do use <a href="https://nextdns.io">NextDNS</a> as DNS resolver that also acts as an hosted Pi-Hole. Can't recommend it enough.</li>
<li>I’ve been a <a href="https://fastmail.com">Fastmail</a> subscriber for 9 years now. I can't say enough good things about them. They have the best support for IMAP (if those things matter to you) and the most impressive sync mechanisms I've seen. They have an insanely fast email client on both desktop and mobile. They don't display ads once you pay. They support unlimited aliases and custom domains.</li>
<li>I use <a href="https://bjango.com/mac/istatmenus/">iStats Menu</a> to keep track of the CPU usage and the current bandwidth usage. I don't care about how the OS manages RAM or fan spinners though. But knowing if a process destroys the CPU is really important on a laptop (or it drains the battery too much), and knowing that something in the OS takes all the bandwidth for no apparent reason is also important to me.</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/apple-music-is-better-than-spotify</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/apple-music-is-better-than-spotify" />
    <title>Apple Music is better than Spotify</title>
    <published>2020-05-02T00:00:00+00:00</published>
    <updated>2020-05-02T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Everyone uses Spotify — at least most people I know. However, Apple Music offers one feature that no one else in the music streaming industry has, which sets it completely apart and make it the go-to app for anyone willing to truly enjoy his music......</summary>
    <content type="html"><![CDATA[
        <p>Everyone uses Spotify — at least most people I know. However, Apple Music offers one feature that no one else in the music streaming industry has, which sets it completely apart and make it the go-to app for anyone willing to truly enjoy his music library.</p>

<p>Spotify has some features that Apple Music doesn’t have and which makes it hard to replace:</p>

<ul>
<li>It’s fast. Really fast. Songs load instantly, the search is instantaneous.</li>
<li>Recommendations are always pertinent. They especially have two automated playlists (Discover Weekly and Release Friday) that blow away every suggestion that Apple Music has ever suggested.</li>
<li>Shared public playlists created by other users are an awesome way of discovering stuff that you didn’t know existed. Online resources like <a href="http://Playlists.net">Playlists.net</a> help you even more in this discovery process.</li>
</ul>

<p>Spotify helps you find new tunes to listen to. It’s pretty amazing actually how good they are at this. I would say, however, that this comes with a drawback. Spotify is extremely good at helping you finding new stuff to hear over and over and over. I would say that Spotify is capitalism applied to music. You consume your music, as quickly as possible, and move on to the next thing as fast as you can. The desktop app has been built for this rapid consumption. It’s not in any way built to enjoy music the way you want to and it gives you only one feature to do it: playlists. Sometimes I think playlists were one of the first features the team built when they created Spotify and never touched the feature again.</p>

<p>But there is something else that bothers me with Spotify. Nothing in the app helps your music stand out. Everywhere in the app, songs, and albums you like appear in lists that have no soul. Music is about magic and emotion, and Spotify strips it all away.</p>

<p>Apple Music treats your music completely differently. This app is made for people who love their music. The UI puts much more emphasis on the covers. Browse your carefully crafted music library is a joy in this application. Apple Music provides lyrics. They let you change the metadata of your songs if you want, from the lyrics to the cover and everything ID3 tag you want. <a href="[https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53](https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53)">Contrary to Spotify</a>, they offer a true random feature. They also let you upload your own tracks. But the killer feature for me is the ability to let you manage your music the way you want, with what I consider being the most underestimated feature of the music player industry, that is both extremely powerful and actually fun to use: <strong>smart playlists</strong>.</p>

<h2>Enter smart playlists</h2>

<p>Smart playlists give programming capabilities to non-technical people. They allow you to group, filter, and organize your songs the way you want it, and with the right combination of parameters, they let you do pretty crazy stuff to continuously rediscover the most important music: the music you once loved and perhaps forgot about it.</p>

<p>Smart playlists are about music you already have in your library and not about music you don’t know about already. While Spotify gives you one way to organize your music (playlists), Apple Music gives you a complete toolset to organize it completely, limited only by your own creativity.</p>

<p>Apple Music uses two types of metadata about your music to help you build smart playlists:</p>

<ul>
<li>Those about the music object itself, like the genre, released date, composer name, name it.</li>
<li>Those about how you use your music: stars that let you rate the music, the number of times you’ve listened to a song, the playlist it belongs to.</li>
</ul>

<p>With a combination of these, here is what you can do. Try to beat that, Spotify (or Tidal, or Deezer).</p>

<p>You can build playlists that group</p>

<ul>
<li>the 50 songs that you’ve listened the most this month</li>
<li>songs about a specific genre (Electro Irish death metal),</li>
<li>every song released in 1950,</li>
<li>all songs that you've added in your library in September 2018,</li>
</ul>

<p>These are already playlists that you can't do with Spotify. But here are more complex playlists that really show you the insane potential of smart playlists:</p>

<ul>
<li>songs that you’ve added two months ago and listened less than 10 times overall,</li>
<li>songs that you’ve rated between 3 and 5 stars, but listened less than 20 times in the last two years,</li>
<li>rap songs added in 2019 that you’ve not skipped once and not yet rated,</li>
<li>rated songs that are > 10 minutes not listened in the last year.</li>
</ul>

<p>These playlists apply to songs from all sources: your own music that you’ve uploaded to Apple servers, or music from Apple Music (the streaming service). However, there is one thing that you can't do with music served by Apple Music: pick songs from another playlist and cross-reference them. It’s too bad because the potential of being able to pick songs from other playlists to compose a new playlist <a href="https://www.reddit.com/r/DoesAnybodyElse/comments/depap/dae_listen_to_their_music_player_on_shuffle_but/">is particularly insane</a>.</p>

<p>It blows my mind how powerful smart playlists are.</p>

<h2>How I manage my smart playlists</h2>

<p>In my library, I use a combination of folders and emojis to quickly find the playlists I want to listen to. Here is how I organize them:</p>

<p><img src="/assets/img/itunes-sidebar.jpg" alt="sidebar in apple music" /></p>

<p>And now the good parts: the smart playlists that I use all the time.</p>

<h3>All songs with at least one star and not listened in the last 10 days</h3>

<p><img src="/assets/img/stars_not_10_days.png" alt="stars not 10 days" /></p>

<h3>All non-Apple Music songs with at least one star and listened less than 10 times</h3>

<p><img src="/assets/img/star_listened_less_10_times.png" alt="stars not 10 days" /></p>

<h3>All songs added in 2018 between one and five stars not listened in the last month</h3>

<p><img src="/assets/img/added_2018_not_listened_last_month.png" alt="stars not 10 days" /></p>

<h3>Songs with a specific genre added but not yet rated</h3>

<p><img src="/assets/img/specific_genre_not_rated.png" alt="stars not 10 days" /></p>

<h3>Top 50 songs of the last month (or any timeframe)</h3>

<p>This one is trickier. With Apple Music you can't query songs that you’ve listened to during a period of time. You only have the <strong>Last played</strong> option, which will not help us achieve our goal here.</p>

<p>The only way I've found to have a top 50 (or 10 or whatever) that is both accurate and static in time, is as follow:</p>

<ul>
<li>Create a smart playlist with the end goal in mind. If you want to have a top 50 of April, create a smart playlist listing the 50 songs sorted by Most played in the last 30 days.</li>
<li>At the end of the month or the first day of the next month, copy all the songs that appear in this smart playlist, to a regular playlist. That's it, this list will exist forever and will not change.</li>
</ul>

<p><img src="/assets/img/top_50.png" alt="stars not 10 days" /></p>

<h2>Conclusion</h2>

<p>I agree that Apple Music has many drawbacks compared to Spotify. Search is deadly slow. Recommendations suck. Apple Beats 1 is simply inaudible. But smart playlists is such a killing feature that I can deal with its problems and still be very happy.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/single-point-of-contact</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/single-point-of-contact" />
    <title>Have a single point of contact for your side project</title>
    <published>2020-02-25T00:00:00+00:00</published>
    <updated>2020-02-25T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">When your side project gains traction, alongside with being flooded by feature requests, you will receive requests to open a Slack community, or a forum, or to have a newsletter, or to use GitHub issues, or to have a dedicated Twitter account. You will......</summary>
    <content type="html"><![CDATA[
        <p>When your side project gains traction, alongside with being flooded by feature requests, you will receive requests to open a Slack community, or a forum, or to have a newsletter, or to use GitHub issues, or to have a dedicated Twitter account. You will also be tempted to record every feature request — because, well, it’s tempting.</p>

<p>Don’t.</p>

<p>If you work on a side project, you will fight every minute of your life to find the time to work on it. You probably have a full-time job, a spouse and/or kids, friends and life in general. Finding 1 or 2 hours per day to work on your passion is tough, and precious.</p>

<p>Do you really want to spend this time maintaining a lot of channels to talk to your community? Don’t get me wrong: having a community around your project is essential. However, the cost of having too many official channels is enormous and drains a lot of attention and energy — energy that you will not spend on doing what you loved in the first place: working on the core of your side project. The more communication channels you have, the more people will /steal/ your time by flooding you with requests or support questions. And as you are kind, you will try to please them — but this is endless.</p>

<p>For your side project, keep one official channel of communication. It could be the GitHub issues of your project or your own Twitter account. That’s it. Communicate with your community through that channel. And focus on your product. When you will find more time to dedicate to it (because the project generates revenues for instance), you will be able to offer other forms of communication. This time will come. But for now, stay sane.</p>
    ]]></content>
</entry>
    </feed>
