<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Regis Freyd</title>
    <link href="https://regisfreyd.com" />
    <link type="application/atom+xml" rel="self" href="https://regisfreyd.com/blog/feed.atom" />
    <updated>2022-07-19T23:22:10+00:00</updated>
    <id>https://regisfreyd.com/blog/feed.atom</id>
    <author>
        <name>Regis Freyd</name>
    </author>
                <entry>
    <id>https://regisfreyd.com/2022-07-18-why-i-post-what-i-post</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2022-07-18-why-i-post-what-i-post" />
    <title>Why I post what I post</title>
    <published>2022-07-18T00:00:00+00:00</published>
    <updated>2022-07-18T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">On Twitter these days, there is two kinds of tweets:


People complaining about stuff.
People teaching life lessons that they probably didn’t experience themselves.


The first category doesn’t bring any value to anyone, apart from the author who......</summary>
    <content type="html"><![CDATA[
        <p>On Twitter these days, there is two kinds of tweets:</p>

<ol>
<li>People complaining about stuff.</li>
<li>People teaching life lessons that they probably didn’t experience themselves.</li>
</ol>

<p>The first category doesn’t bring any value to anyone, apart from the author who feels good after shouting in this empty space that Internet can be. No one cares about you being upset about something, not even the brand you are complaining about.</p>

<p>The second category also doesn’t bring real value because reading about the 10 novel ways to be happy in life won’t make you feel happy in life. Also, it seems super fake.</p>

<p>So what posts should you write? No idea.</p>

<p>I don’t have a clue about how to grow a social media account and I have definitive proof of that. I have no advice to give on anything, because I don’t know much.</p>

<p>But here is what I like to read: jokes and news about stuff that people are trying to build (aka what value are you adding to the world every day).</p>

<p>This is why I focus personally on these two types of posts:</p>

<ol>
<li>Funny tweets (this includes jokes that I hope make you smile and drawings made on my iPad)</li>
<li>Stuff that I’m building.</li>
</ol>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2022-04-06-validate-your-ideas-before-doing-anything-vs-actually-doing-stuff</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2022-04-06-validate-your-ideas-before-doing-anything-vs-actually-doing-stuff" />
    <title>Validate your ideas before doing anything vs actually doing stuff</title>
    <published>2022-04-06T00:00:00+00:00</published>
    <updated>2022-04-06T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">If you are on Twitter and follow the indie hacker community or any community about building something, you’ve surely come across the same advice over and over: before doing any work, validate your idea.

As far as I know, this comes mainly from the......</summary>
    <content type="html"><![CDATA[
        <p>If you are on Twitter and follow the indie hacker community or any community about building something, you’ve surely come across the same advice over and over: before doing any work, validate your idea.</p>

<p>As far as I know, this comes mainly from <a href="https://buffer.com/resources/idea-to-paying-customers-in-7-weeks-how-we-did-it/">the proof of concept Buffer did</a> before starting their business.</p>

<p>The concept is to design a simple signup form as quickly as possible, try to reach the community you want to sell your product to, and see if people sign up for your product that doesn’t exist yet.</p>

<p>This is good advice, for most cases. But there are cases where this will never work.</p>

<p>Sometimes, people don’t know they need something before they see it for real, in action. A signup form will not be enough. The product has to be experienced.</p>

<p>For instance, when Slack was launched, it was expected that no one would want the product, simply because no one had experienced this kind of product before. The CEO even wrote a great email about this, <a href="https://medium.com/@stewart/we-dont-sell-saddles-here-4c59524d650d">We don’t sell saddles here</a>.</p>

<p>If you sell a product based on a fake screen and a fake marketing promise, you will validate an illusion. You won’t show what your product is. How it feels for real. How good it is. The thousands of little details that actually give your product a personality. The real hard work.</p>

<p>Building a product is insanely hard. Validating the idea is as meaningless as having the idea itself. It's easy. What's hard is the work to actually make this idea a reality.</p>

<p>Once again, we have glorified the shortest path to success. What those Get rich quickly tweets really say is: validate your idea in one day, because you are excited about it, and because having ideas is exciting, and if it doesn’t stick, move to a new idea. All these are the easy parts, that you can do in a couple of days.</p>

<p>Most products work eventually, as long as the idea is not stupidly stupid–if the founder has enough energy to sustain all the very, very long months or years where you have trouble finding money to pay your rent or your food, while you create the product and market it.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2021-02-14-importing-employees</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2021-02-14-importing-employees" />
    <title>Importing employees</title>
    <published>2021-02-14T00:00:00+00:00</published>
    <updated>2021-02-14T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">I&#039;ve been working on OfficeLife for more than two years now, silently, patiently and very consistently. The number of features keeps growing, which makes me happy.

The goal of OfficeLife is to manage everything employees do in a company. From projects......</summary>
    <content type="html"><![CDATA[
        <p>I've been working on <a href="https://officelife.io">OfficeLife</a> for more than two years now, silently, patiently and very consistently. The number of features keeps growing, which makes me happy.</p>

<p>The goal of OfficeLife is to manage everything employees do in a company. From projects to time tracking to holidays.
However, there is no point for anyone to use the software if we don’t offer a simple way to import employees to the system in the first place.</p>

<p>The strength of OfficeLife appears when <em>all</em> the employees use the system.</p>

<p>In OfficeLife, right now, you can add employees, one by one, by hand. But who would use the Add employee screen 500 times to import a list from a medium-size company?</p>

<p>When I started developing OfficeLife, I wanted to provide a simple way to populate an account. This would serve two purposes:</p>

<ul>
<li>provide test data for developers on the project, so they can dive in the code right away and have a solid set of data ready for them to play with,</li>
<li>provide a demo account on <a href="https://officelife.io">OfficeLife.io</a>, that would have realistic data that use all the features, so potential users/buyers can see quickly what the tool can do.</li>
</ul>

<p>Very early in the development process, I wrote a <a href="https://laravel.com/docs/master/artisan#writing-commands">Laravel command</a> that populate an account with realistic data. I <a href="./a_lazy_approach_to_demonstrate_what_your_product_can_do_for_your_users_the_Laravel_way">wrote about it here</a>. This served me well and still does today. I run this command every day. So I postponed the ability to import actual, real data, because I didn't need it. And also because uploading files is always a pain, no matter the framework, and can lead to many errors.</p>

<p>However, the future users of my tool will want to import employees so they can start using it. I can’t postpone the feature any longer.</p>

<p>There are two main things we could do about importing users.</p>

<ul>
<li>The first one is to connect OfficeLife to an Active Directory. A lot of companies use AD to manage the list of users. But I’m unsure right now if the companies which would be interested into what OfficeLife offers, actually use AD at all. Supporting AD in OfficeLife would be very costly at first, because I have no idea on how that works. Fortunately, there are some libraries for Laravel for this, but still, it would take a least a full month of work to make this happen, at the very minimum – for a feature that I’m not 100% sure people would use.</li>
<li>The second option would be to import a CSV.</li>
</ul>

<p>So I’m currently implementing the feature to upload a CSV of employees.</p>

<p>Like always in programming, there are many ways to write the feature.</p>

<p>Here is what I've decided to do (and I hope I won’t regret it in the future). It will be a three-step procedure:</p>

<ul>
<li>The user will upload a CSV. The user HAS to follow a strict convention to match the column names etc...</li>
<li>Right after uploading the file, we will display a table showing all the entries in the file and for each line, if we've encountered any errors during upload (like a duplicated email address, or a malformed CSV).</li>
<li>The user can review this table and decide if (s)he wants to actually import this data to the system. If (s)he agrees, actually create employees for each entry.</li>
</ul>

<p>In programming terms, here is what it translates to:</p>

<ul>
<li>write a service that lets me import a file, regardless of the nature of the file. This brings the File object in my codebase. I will need the File object for many other aspects of the project anyway: adding receipts to expenses, avatars, on-boarding documents,...</li>
<li>Before parsing the uploaded file, create an ImportJob. Parse the uploaded file, and for each line, create an ImportJobReport entry. This will contain the name, email etc... of each potential employee. Also, this lets me check that the entry is valid.</li>
<li>Once the user agrees to import this data, we will call the <code>AddEmployeeToCompany</code> service for each one of these lines.</li>
</ul>

<p>This is a bit complex, but the process will make sure we won’t import crap data to the system.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-08-21-a_lazy_approach_to_demonstrate_what_your_product_can_do_for_your_users_the_Laravel_way</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-08-21-a_lazy_approach_to_demonstrate_what_your_product_can_do_for_your_users_the_Laravel_way" />
    <title>A lazy approach to demonstrate what your product can do for your users, the Laravel way</title>
    <published>2020-08-21T00:00:00+00:00</published>
    <updated>2020-08-21T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">When users end up on your SAAS marketing site, they want to see as quickly as possible what this product can do for them and how it will help. They want to see what the product can do for real. Screenshots are not enough. Videos are slightly better.......</summary>
    <content type="html"><![CDATA[
        <p>When users end up on your SAAS marketing site, they want to see as quickly as possible what this product can do for them and how it will help. They want to see what the product can do <strong>for real</strong>. Screenshots are not enough. Videos are slightly better. Asking users to set up their accounts to see what it will look like is a no go, and the worst idea of all is to set up a button requesting a demo from a salesman.</p>

<p>The best way to demonstrate the capabilities and features of your product is to fill an account with a set of fake data, ideally without any lorem ipsum but actual words. How would you do that?</p>

<p>Several strategies let us achieve exactly that. We’ll discuss the pros and cons of each, from a marketing perspective and more importantly from a developer perspective.</p>

<ul>
<li>Upon account creation, fill the account with fake data for the user. This is what I call <strong>the Basecamp way</strong>.</li>
<li>Ask the user to use a button to populate the account with fake data.</li>
<li>Seed the database at the console level.</li>
</ul>

<h2>First option: the Basecamp way</h2>

<p>When you create an account in <a href="https://basecamp.com">Basecamp</a>, they automatically populate your account with 3 sample projects. Each one of them contains data that seem extremely real, alongside real photos and real comments and interactions. It’s a smart idea as the user can immediately jump in and see, for real, what the product does. However, users will have to find a way to dismiss this information and bring their account back to the original state. Granted, it’s not hard to find in Basecamp, but still.</p>

<p>From a Laravel developer perspective, here is what this approach means:</p>

<ul>
<li>Every time an account is created, you have to run a job (or a command that triggers a bunch of jobs) to fill the account with fake data. I suggest that you use queues for that, which Laravel makes it super easy to use.</li>
<li>This job will actually block the account creation process, as you will need to make sure the job is done before displaying the welcome state to your users.</li>
<li>That means having a mechanism in your views that will wait for the process to end. You can use several techniques for that, the best way being WebSockets with something like <a href="https://pusher.com">Pusher</a> or your own Redis.</li>
<li>If your site gains traction and you suddenly attract lots of visitors, the number of jobs will accumulate, the queue will get bigger and the signup process will take significantly more time.</li>
<li>To prevent this, you can use more workers to work on the queue jobs, but it’s very likely that you still have only one master database so it won’t be much faster even if you add more workers.</li>
<li>Another drawback, which is kind of inevitable, is the increase of the database’s size as every new user will have his account filled with fake data. Depending on the project’s size, this can accumulate quickly. Unless you provide a mechanism to remove this data, which is an entirely new feature in itself (more on that later).</li>
</ul>

<p>This approach is a lot of work. It’s also a solution that we can throw money at, even though that’s a solution that most indie hackers don’t like: if you want to reduce the time jobs spend in the queues, you simply need a more powerful database server and your data will be processed faster.</p>

<h2>Second option: populate the account on demand</h2>

<p>The second option is a bit simpler, but not that much. After having created the account, the user sees a message asking him if he wants to populate the account with a set of data so he can see what the product will look like.</p>

<p>What I like with this approach is the fact that the user will be in control. He will either choose to browse the product with all the possible blank states in the app, or browse it with a lot of fake data. However, it comes with the drawback of having one hard choice to make when you first land on the page: should you fill the account with all these data?</p>

<p>Technically, this option is slightly less complex than the first option. You won’t need to block the UI upon account creation - but you will still need some kind of mechanisms to show the user that the account is currently being populated.</p>

<h2>Third option: seed the account at the console level</h2>

<p>This is the solution I’ve chosen for my upcoming application, OfficeLife.</p>

<p>OfficeLife will be available in several flavors: as a SAAS on officelife.io, and as a self-hosted option, available for free on GitHub, DockerHub, etc…
When you provide an open-source version of your software, you need to be very careful with all the options you provide to you and your future users. Every decision you make will affect everyone.</p>

<p>I’ve decided to provide a way to populate a dummy account, but only when the administrator of the instance will choose to. The solution is to provide a <a href="https://laravel.com/docs/7.x/artisan">custom Laravel command</a> that will populate the account. You need to connect to a terminal and run the command. This will wipe the database, run all the migrations, create an account, and populate all the data.</p>

<p>The command is <code>php artisan setup:dummyaccount</code>. And the script is as follow (it has been greatly, greatly shortened as the original file is gigantic):</p>

<script src="https://gist.github.com/djaiss/a2f1702a100da3febe60434b25e73df4.js"></script>

<p>The advantages compared to previous solutions:</p>

<ul>
<li>The administrator is in complete control of when this process occurs.</li>
<li>You won’t block any signup process as it’ll be executed behind the scenes before any user gets on the platform.</li>
<li>Technically, it’s not complex per se.</li>
</ul>

<p>However, with this solution, how would your users test your SAAS? It’s simple: create a separate instance from your main one, something like <code>demo.officelife.io</code>. This link would be available from your marketing site, probably on the header, and would be separate from the page where your users would signup for real.</p>

<p>This instance would have a cron that would run every 5 minutes, which would trigger the <code>setup:dummyaccount</code> command. On the login page, simply indicate the login and password that the users need to enter to be logged, and here we go - users have a complete account to play with, with no drawbacks.</p>

<p>Why would the script run every 5 minutes?</p>

<ul>
<li>To prevent users from entering too much garbage. If you don’t reset the database at a regular interval, users would create too much fake data and the quality of the data, that all test users would see,  would drastically be degraded.</li>
</ul>

<p>The technical complexity of this solution is limited. The command is pretty simple to write. There are two things to set up in your app:</p>

<ul>
<li>Setup the cron that triggers the command every 5 minutes. Laravel makes it dead easy and has a <a href="https://laravel.com/docs/7.x/scheduling#scheduling-artisan-commands">good documentation for this</a>.</li>
<li>Put in place a message in the header of your app, that will warn users the app is reset every 5 minutes.</li>
</ul>

<h3>Removing fake data from the database</h3>

<p>Removing fake data means having the ability to know which data is fake. What does it mean?</p>

<p>In my apps, I mainly use services to do anything that talks to the database. I call them services, but it’s also called <a href="https://freek.dev/1371-refactoring-to-actions">action classes</a>, commands, or a few other terms. The name doesn’t matter.</p>

<p>In every service of my app, one of the parameters needed by the service is a boolean that indicates whether the data is dummy data or not. Take a look at how it’s being used in the snippet below (not working code):</p>

<script src="https://gist.github.com/djaiss/8b0420330e378994bbe7508a368b66e1.js"></script>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-08-15-laravel-test-job-dispatches-other-jobs</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-08-15-laravel-test-job-dispatches-other-jobs" />
    <title>How to test that a job dispatches another job in Laravel</title>
    <published>2020-08-15T00:00:00+00:00</published>
    <updated>2020-08-15T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Sometimes, in your Laravel application, you need a job that will dispatch other jobs. For instance, a cron that triggers a job to calculate the activity of all users, and this job triggers a single job for each user.

The only way to know if the second......</summary>
    <content type="html"><![CDATA[
        <p>Sometimes, in your Laravel application, you need a job that will dispatch other jobs. For instance, a cron that triggers a job to calculate the activity of all users, and this job triggers a single job for each user.</p>

<p>The only way to know if the second job gets triggered is to fake the Bus chain, using <code>Queue::fake</code> at the beginning of your tests.</p>

<p>But if you do that, you will only test that the first job get dispatched. It will be dispatched, but not executed - therefore, the secondary jobs won’t be dispatched at all.</p>

<p>How do you test that all the secondary jobs were effectively dispatched?</p>

<script src="https://gist.github.com/djaiss/b59b872832be5027cc9dfca6a776a469.js"></script>

<p>Instead of calling the first job in a more traditional way, like <code>FirstJob()::dispatch()</code>, we need to instantiate it and call both the dispatch() and handle() methods to actually bypass the fact that the first job isn't really dispatched thanks to the calling the Queue::fake() method.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-08-04-email-is-not-broken</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-08-04-email-is-not-broken" />
    <title>Email is not broken</title>
    <published>2020-08-04T00:00:00+00:00</published>
    <updated>2020-08-04T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">There has been a lot of talks about email being broken since the launch of Hey!.

Why would it be?


Too much spam.
Too many newsletters.
Sluggy or unpolished email clients.


I don&#039;t have any of these problems. Email is not broken at all for me. And I......</summary>
    <content type="html"><![CDATA[
        <p>There has been a lot of talks about email being broken since the launch of Hey!.</p>

<p>Why would it be?</p>

<ul>
<li>Too much spam.</li>
<li>Too many newsletters.</li>
<li>Sluggy or unpolished email clients.</li>
</ul>

<p>I don't have any of these problems. Email is not broken at all for me. And I believe <a href="https://fastmail.com">Fastmail</a> is the main reason why.</p>

<h2>The first rule of email</h2>

<p>First of all, you should never, ever give your email address to people or systems who would use it in a conversation other than a 1-on-1 relationship.</p>

<p>That means to not give your email address:</p>

<ul>
<li>To someone who would put you in a 50 people private mailing list to invite you for a kid’s birthday — of course not in BCC. Very quickly, your email address will be all around the Internet.</li>
<li>To a system, like a newsletter, that will surely resell your data.</li>
<li>To a new site when you create your account, that will also surely resell your data.</li>
</ul>

<h2>If you don't give your email address, what should you do</h2>

<p>This is how I envision the perfect system to never be bothered by unsolicited emails ever again:</p>

<ul>
<li>Your primary email address should only be given to people you absolutely trust.</li>
<li>You need to have one email address per account (or newsletter) that you have. Yes, that means potentially have 400 different email addresses.</li>
<li>If you receive spam, you simply delete this email address from your system and you’ll never be bothered again by this spam.</li>
<li>You need to be able to quickly identify which site leaked your data. To either update the email address with a new one, or insult the site on Twitter.</li>
</ul>

<h2>Aliases: the spam destroyer</h2>

<p>Enter the power of aliases. Fastmail lets you create as many email addresses as you want, that you can use to receive emails. Use those aliases when you sign up somewhere. If you happen to receive spam, or unwanted emails, simply delete the alias, and never hear about the spam ever again.</p>

<p>An email address has two parts: the part before the <code>@</code> symbol (the local-part), and the part after the <code>@</code> symbol (the domain name).</p>

<p>Fastmail lets you enter your own local-part, and provides at least 50 domains to choose from.</p>

<p>The rule is to use a name for this email address that will quickly let you identify which site actually spammed you. You need to follow your own convention to name these aliases. I suggest you follow this: <code>sitename+few letters of your first name + few letters of your last name</code> with one of the 50 domains Fastmail gives you to choose from.</p>

<p>Let’s say you are called Henri Lait. If you had to create an account on Twitter, you could use something like “twitterhenril@sent.as”. On Facebook, “facebookhenril@mms.com”. You get the idea.</p>

<p>Then, when you are spammed by one of these sites, or if they end up being leaked, you simply have to delete this alias and simply move on. The spammer will never know that they can’t reach you again. But you will know which site spammed you, or which site sold your data.</p>

<h2>The drawback</h2>

<p>The only drawback of this system is to set it up in the first place. It can be pretty time consuming to update all existing sites or newsletters with a custom email address for each one of these. Also, you need to create an alias for every new account you will want to use in the future. I believe it’s worth it.</p>

<h2>Conclusion</h2>

<p>Personally, I have more than 500 aliases now. Every one of my account has a custom alias. My spam folder currently has only 2 emails, although is empty, most of the time.</p>

<p>If you use one custom alias per account, and set up 2FA on each one of these, I believe we have one of the most secure system you can find.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-08-03-documentation-driven-development</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-08-03-documentation-driven-development" />
    <title>Documentation Driven Development</title>
    <published>2020-08-03T00:00:00+00:00</published>
    <updated>2020-08-03T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Documentation is hard and feels unrewarding. Therefore, it’s the last thing you write. When you start your project, you have a high level of motivation and this is how your development cycle looks like:


Write feature
Write tests
Push features to......</summary>
    <content type="html"><![CDATA[
        <p>Documentation is hard and feels unrewarding. Therefore, it’s the last thing you write. When you start your project, you have a high level of motivation and this is how your development cycle looks like:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
<li>Write documentation</li>
<li>Publish documentation</li>
</ul>

<p>After a few months, your motivation starts to decrease and your development cycle looks like this:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
<li>Write documentation</li>
</ul>

<p>Time passes. Your development cycle now looks like this:</p>

<ul>
<li>Write feature</li>
<li>Write tests</li>
<li>Push features to production</li>
</ul>

<h2>The many benefits of a great documentation</h2>

<p>Documentation is hard to write and hard to maintain. Even more at the end of the feature cycle, when you’ve forgotten all the edge cases you wrote.</p>

<p>It’s sad, because there are actually many benefits of having a great documentation, especially with side projects:</p>

<ul>
<li>It greatly helps the adoption of your project by other developers, as almost no one will work on your tool if you don't provide some kind of documentation.</li>
<li>It’s free marketing. Documentation contains all the keywords necessary for your SEO, and you won’t have to write those shitty blog posts that most internet gurus tell you to write and no one wants to read.</li>
<li>It’s really useful for your users, as most of them are not actually you, therefore needing guidance on how to use your tool.</li>
<li>It reduces the number of customer support tickets you will have to answer to.</li>
</ul>

<p>A complete, well-written documentation is always the sign of a great product. It’s easily the most powerful tool you have at your disposal if you know nothing about marketing and still want to gain some traction. READMEs are also a very powerful marketing tool that I should write about in the future.</p>

<h2>Change how you write softwares</h2>

<p>I suggest to completely change how you write softwares.</p>

<p>Start with the documentation. That means: do not write a single line of code without having completely documented the feature you are about to write.</p>

<p>Then, write the code that supports this documentation, and write tests that match this code. Or write tests then the code if you are fan of TDD — it doesn’t really matter.</p>

<p>Sometimes, tests will show you that you missed something in your documentation. Update it accordingly.</p>

<p>Then push both the code and the documentation to production.</p>

<p>Later on, if you need to modify the feature, start by updating your documentation. Then update your code. Always start with the documentation.</p>

<p>Ideally, you would have a rule in your CI that prevent you from committing a feature without the associated documentation. I don't know how to do it programmatically, but you can simply have a checklist in your pull request template that lets you achieve this goal.</p>

<h2>Final note</h2>

<p>I don't like methodologies in general. Don’t waste time with TDD, BDD and other methodologies that seem to be designed to slow down side projects.</p>

<p>What’s really important is a software</p>

<ul>
<li>That works,</li>
<li>That is really fast,</li>
<li>That has a great documentation so both developers and users will know how to use it.</li>
</ul>

<p>Point 1 is covered by having tests. Write tests, always, but not too many.</p>

<p>Point 2 comes with experience. Making a software fast is a result of a lot of decisions and should be one of your priority, but you will only know how to it well after a few years of struggling with bad code.</p>

<p>Point 3 comes by forcing you to write documentation before you do anything.</p>

<p>Nothing else matters, really.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-05-13-how-i-work-2020-edition</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-05-13-how-i-work-2020-edition" />
    <title>How I work (2020 edition)</title>
    <published>2020-05-13T00:00:00+00:00</published>
    <updated>2020-05-13T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">As a developer, few things are as important as your setup to help you have productive days. After years of trials and errors, I’m currently in a state where I love every single tool that I use every day.



After years of working with Sublime Text and......</summary>
    <content type="html"><![CDATA[
        <p>As a developer, few things are as important as your setup to help you have productive days. After years of trials and errors, I’m currently in a state where I love every single tool that I use every day.</p>

<h2>Text editor</h2>

<p>After years of working with <a href="https://www.sublimetext.com/">Sublime Text</a> and <a href="https://www.vim.org/">Vim</a>, I've been using VS Code as my primary editor for a couple of years now. Even though it’s built on top of Electron, it’s just great. I agree it’s not as fast as Sublime Text for opening and manipulating files, but the amount of usefulness it brings, whereas as core features or through extensions, is unmatched. I've also tried PHPStorm multiple times, but this IDE tries to do too much and I miss some keyboard shortcuts. I probably could fine tune it to my taste, as I know everything is customizable inside PHPStorm, but I’m a developer, so I’m lazy.</p>

<p>Therefore, VS Code. In the editor, I try to reduce the noise as much as possible. I would never understand why you would need the minimap, for instance. Yes, it’s pretty, but do you need to browse your files that way? Anyway...</p>

<p>Here is a screenshot of my editor.</p>

<p><img src="/assets/img/vscode.png" alt="vscode" /></p>

<h3>Theme</h3>

<ul>
<li>Monokai is my go-to theme. It's not the prettiest, but it has the right readibility/noise ratio that allows me to browse and write code efficiently. It also ships by default with VS Code.</li>
</ul>

<h3>Extensions</h3>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a>: this extension automatically closes HTML tags. Useful when doing front-end stuff.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight">Color Highlight</a>: adds a border of color around every hexadecimal color defined in your CSS. Somewhat useful.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv">DotENV</a>: adds syntax highlighting to .env files. Very useful for all my Laravel projects.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditConfig for VS Code</a>: Adds support to <a href="https://editorconfig.org/">editorconfig files</a>. This lets you maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>: I use for only one feature: the ability to see who last changed the current line, straight inside the editor. It’s an easy way to git blame any lines, basically.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion">IntelliSense for CSS class names in HTML</a>: this provides CSS class name completion in your HTML files. Really useful, especially since I barely write CSS anymore thanks to functional CSS. I've been using functional CSS for 2-3 years now and I couldn't go back to writing regular CSS. Want to know more about it? Read <a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">this awesome article</a> by Adam Wathan or dive into those great CSS frameworks (<a href="https://tachyons.io/">Tachyions</a> and <a href="https://tailwindcss.com/">TailwindCSS</a>).</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=cjhowe7.laravel-blade">laravel-blade</a>: adds syntax highlighting for Laravel's blade.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=AlanWalk.markdown-toc">Markdown TOC</a>: generates table of contents automatically in all the markdown documents I write (specifically <a href="https://github.com/monicahq/monica">Monica's technical documentation</a>).</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker">PHP DocBlocker</a>: this automatically adds the necessary docblocks above your methods as you type <code>/**</code>.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-pack">PHP Extension Pack</a>: contains the core PHP extensions that you need to get PHP up and running in VS Code.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client">PHP Intelephense</a>: The best extension to provide code completion for your PHP. Also, it also imports classes as you type, and this is awesome.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings">Sublime Text Keymap and Settings Importer</a>: because I come from Sublime, there are some texts that I wanted to use in VS Code.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=nonoroazoro.syncing">Syncing</a>: I have multiple computers, and I need to sync my settings, shortcuts, themes and everything else between those machines easily. I use Syncing to achieve this goal. It’s not a popular extension but it works better than the <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">most used one</a>.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a>: adds syntax highlighting and linting to your Vue files.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a>: a set of nice eye-candy icons that I enjoy.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">Wakatime</a>: I've been using Wakatime to automatically track the time I spent in my code editor on a weekly basis. The free plan sends me an email every week about the number of hours I spend in each of my projects. Right now, as everything I do is done on the side, I spend around 20 hours per week on my projects.</li>
</ul>

<h2>Development environment</h2>

<ul>
<li>I develop mainly in PHP, so I use <a href="https://laravel.com/docs/master/valet">Valet</a> to take care of whatever is needed to make everything works locally. I used to run Valet+, but it caused errors when I tried to upgrade the PHP versions.</li>
<li>I use MySQL and SQLite equally. Locally, apps run on MySQL, but test suites are run against SQLite for performance reasons (it’s probably at least 10 times faster). To make sure tests are also working fine with MySQL, I have two GitHub actions, one using MySQL and the other SQLite, that give me an additional peace of mind.</li>
<li>I used to use <a href="https://sequelpro.com/">Sequel Pro</a> to manage databases, but now I use <a href="https://www.tableplus.io/">Table Plus</a> as I have to manage SQLite databases now. Also, Table Plus has constant updates.</li>
<li>I mainly use <a href="https://desktop.github.com/">GitHub Desktop</a> to pull and push changes.</li>
</ul>

<h3>Terminal</h3>

<p>I use <a href="https://www.iterm2.com/">iTerm2</a> as my terminal of choice. It still uses Bash, unfortunately, but I know I’ll have to migrate to ZSH when I’ll migrate to a new computer.</p>

<p><img src="/assets/img/terminal.png" alt="vscode" /></p>

<h3>macOS</h3>

<p>MacOS is my OS of choice. My friends think I’m an Apple fan boy, but it’s not true. I just adore this OS, even though they keep adding stuff that I don't value at all (Twitter and Facebook integration right in the OS – wtf), and removing features that I valued a lot (the ability to switch desktops without animation). But despite those changes, macOS is extremely elegant. No other OSes come close to this level of polish.</p>

<p><img src="/assets/img/desktop.png" alt="vscode" /></p>

<ul>
<li>I don't like dark mode in macOS. So I've simply disabled it entirely.</li>
<li>The dock is always on the left part of the screen, and is always hidden.</li>
<li>I <a href="https://gist.github.com/djaiss/ddf25f26aa62386eeadf18264535288d">disable or change a lot of default features</a> that are in macOS through a bunch of commands run into the terminal.</li>
</ul>

<h3>Softwares</h3>

<ul>
<li>Whenever I can, I install all softwares with <a href="https://github.com/Homebrew/homebrew-cask">brew cask</a>. If you know Homebrew, Cask works in a similar fashion. For instance, to install 1Password, you would just need to run <code>brew cask install 1password</code> and the install process is handled automatically. But the really good part is that you can actually automate this process in a dotfile. That way when you setup a new machine, you just run your script and all is set for you. <a href="https://gist.github.com/djaiss/e46e707769b216402768f1ec1c9d3d2e">This is the script</a> that I use for this purpose.</li>
<li>Speaking of <a href="https://1password.com/">1password</a>. I don't think we have to explain why having a password manager in 2020 is essential. I’ve been a very happy 1password subscriber for years now, and don't plan to switch anytime soon. The app is very elegant, very powerful and gets out of the way.</li>
<li>I use Firefox as my main browser. The dev tools used to lag behind Chrome, but are now much better. Also, privacy.</li>
<li>I don't use todo lists. I've tried them all, but I can't keep up with all the todos so I usually delete the clients one week after installation. I just focus on 1 or 2 tasks and move on.</li>
<li>I use Apple Music as <a href="/apple-music-is-better">it’s much better than Spotify</a>.</li>
<li>I use the official Twitter client.</li>
<li><a href="https://telegram.org/">Telegram</a> is my go-to communication medium with friends and family.</li>
<li>I use Alfred as a task launcher. It’s great, but I don't really need it.</li>
<li>I use <a href="https://www.ergonis.com/products/typinator/">Typinator</a> (a text expander like software) and it’s awesome.</li>
<li>I don't use a VPN, but I do use <a href="https://nextdns.io">NextDNS</a> as DNS resolver that also acts as an hosted Pi-Hole. Can't recommend it enough.</li>
<li>I’ve been a <a href="https://fastmail.com">Fastmail</a> subscriber for 9 years now. I can't say enough good things about them. They have the best support for IMAP (if those things matter to you) and the most impressive sync mechanisms I've seen. They have an insanely fast email client on both desktop and mobile. They don't display ads once you pay. They support unlimited aliases and custom domains.</li>
<li>I use <a href="https://bjango.com/mac/istatmenus/">iStats Menu</a> to keep track of the CPU usage and the current bandwidth usage. I don't care about how the OS manages RAM or fan spinners though. But knowing if a process destroys the CPU is really important on a laptop (or it drains the battery too much), and knowing that something in the OS takes all the bandwidth for no apparent reason is also important to me.</li>
</ul>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-05-02-apple-music-is-better-than-spotify</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-05-02-apple-music-is-better-than-spotify" />
    <title>Apple Music is better than Spotify</title>
    <published>2020-05-02T00:00:00+00:00</published>
    <updated>2020-05-02T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">Everyone uses Spotify — at least most people I know. However, Apple Music offers one feature that no one else in the music streaming industry has, which sets it completely apart and make it the go-to app for anyone willing to truly enjoy his music......</summary>
    <content type="html"><![CDATA[
        <p>Everyone uses Spotify — at least most people I know. However, Apple Music offers one feature that no one else in the music streaming industry has, which sets it completely apart and make it the go-to app for anyone willing to truly enjoy his music library.</p>

<p>Spotify has some features that Apple Music doesn’t have and which makes it hard to replace:</p>

<ul>
<li>It’s fast. Really fast. Songs load instantly, the search is instantaneous.</li>
<li>Recommendations are always pertinent. They especially have two automated playlists (Discover Weekly and Release Friday) that blow away every suggestion that Apple Music has ever suggested.</li>
<li>Shared public playlists created by other users are an awesome way of discovering stuff that you didn’t know existed. Online resources like <a href="http://Playlists.net">Playlists.net</a> help you even more in this discovery process.</li>
</ul>

<p>Spotify helps you find new tunes to listen to. It’s pretty amazing actually how good they are at this. I would say, however, that this comes with a drawback. Spotify is extremely good at helping you finding new stuff to hear over and over and over. I would say that Spotify is capitalism applied to music. You consume your music, as quickly as possible, and move on to the next thing as fast as you can. The desktop app has been built for this rapid consumption. It’s not in any way built to enjoy music the way you want to and it gives you only one feature to do it: playlists. Sometimes I think playlists were one of the first features the team built when they created Spotify and never touched the feature again.</p>

<p>But there is something else that bothers me with Spotify. Nothing in the app helps your music stand out. Everywhere in the app, songs, and albums you like appear in lists that have no soul. Music is about magic and emotion, and Spotify strips it all away.</p>

<p>Apple Music treats your music completely differently. This app is made for people who love their music. The UI puts much more emphasis on the covers. Browse your carefully crafted music library is a joy in this application. Apple Music provides lyrics. They let you change the metadata of your songs if you want, from the lyrics to the cover and everything ID3 tag you want. <a href="[https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53](https://community.spotify.com/t5/iOS-iPhone-iPad/Shuffle-play-is-not-random/td-p/750619/page/53)">Contrary to Spotify</a>, they offer a true random feature. They also let you upload your own tracks. But the killer feature for me is the ability to let you manage your music the way you want, with what I consider being the most underestimated feature of the music player industry, that is both extremely powerful and actually fun to use: <strong>smart playlists</strong>.</p>

<h2>Enter smart playlists</h2>

<p>Smart playlists give programming capabilities to non-technical people. They allow you to group, filter, and organize your songs the way you want it, and with the right combination of parameters, they let you do pretty crazy stuff to continuously rediscover the most important music: the music you once loved and perhaps forgot about it.</p>

<p>Smart playlists are about music you already have in your library and not about music you don’t know about already. While Spotify gives you one way to organize your music (playlists), Apple Music gives you a complete toolset to organize it completely, limited only by your own creativity.</p>

<p>Apple Music uses two types of metadata about your music to help you build smart playlists:</p>

<ul>
<li>Those about the music object itself, like the genre, released date, composer name, name it.</li>
<li>Those about how you use your music: stars that let you rate the music, the number of times you’ve listened to a song, the playlist it belongs to.</li>
</ul>

<p>With a combination of these, here is what you can do. Try to beat that, Spotify (or Tidal, or Deezer).</p>

<p>You can build playlists that group</p>

<ul>
<li>the 50 songs that you’ve listened the most this month</li>
<li>songs about a specific genre (Electro Irish death metal),</li>
<li>every song released in 1950,</li>
<li>all songs that you've added in your library in September 2018,</li>
</ul>

<p>These are already playlists that you can't do with Spotify. But here are more complex playlists that really show you the insane potential of smart playlists:</p>

<ul>
<li>songs that you’ve added two months ago and listened less than 10 times overall,</li>
<li>songs that you’ve rated between 3 and 5 stars, but listened less than 20 times in the last two years,</li>
<li>rap songs added in 2019 that you’ve not skipped once and not yet rated,</li>
<li>rated songs that are > 10 minutes not listened in the last year.</li>
</ul>

<p>These playlists apply to songs from all sources: your own music that you’ve uploaded to Apple servers, or music from Apple Music (the streaming service). However, there is one thing that you can't do with music served by Apple Music: pick songs from another playlist and cross-reference them. It’s too bad because the potential of being able to pick songs from other playlists to compose a new playlist <a href="https://www.reddit.com/r/DoesAnybodyElse/comments/depap/dae_listen_to_their_music_player_on_shuffle_but/">is particularly insane</a>.</p>

<p>It blows my mind how powerful smart playlists are.</p>

<h2>How I manage my smart playlists</h2>

<p>In my library, I use a combination of folders and emojis to quickly find the playlists I want to listen to. Here is how I organize them:</p>

<p><img src="/assets/img/itunes-sidebar.jpg" alt="sidebar in apple music" /></p>

<p>And now the good parts: the smart playlists that I use all the time.</p>

<h3>All songs with at least one star and not listened in the last 10 days</h3>

<p><img src="/assets/img/stars_not_10_days.png" alt="stars not 10 days" /></p>

<h3>All non-Apple Music songs with at least one star and listened less than 10 times</h3>

<p><img src="/assets/img/star_listened_less_10_times.png" alt="stars not 10 days" /></p>

<h3>All songs added in 2018 between one and five stars not listened in the last month</h3>

<p><img src="/assets/img/added_2018_not_listened_last_month.png" alt="stars not 10 days" /></p>

<h3>Songs with a specific genre added but not yet rated</h3>

<p><img src="/assets/img/specific_genre_not_rated.png" alt="stars not 10 days" /></p>

<h3>Top 50 songs of the last month (or any timeframe)</h3>

<p>This one is trickier. With Apple Music you can't query songs that you’ve listened to during a period of time. You only have the <strong>Last played</strong> option, which will not help us achieve our goal here.</p>

<p>The only way I've found to have a top 50 (or 10 or whatever) that is both accurate and static in time, is as follow:</p>

<ul>
<li>Create a smart playlist with the end goal in mind. If you want to have a top 50 of April, create a smart playlist listing the 50 songs sorted by Most played in the last 30 days.</li>
<li>At the end of the month or the first day of the next month, copy all the songs that appear in this smart playlist, to a regular playlist. That's it, this list will exist forever and will not change.</li>
</ul>

<p><img src="/assets/img/top_50.png" alt="stars not 10 days" /></p>

<h2>Conclusion</h2>

<p>I agree that Apple Music has many drawbacks compared to Spotify. Search is deadly slow. Recommendations suck. Apple Beats 1 is simply inaudible. But smart playlists is such a killing feature that I can deal with its problems and still be very happy.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://regisfreyd.com/2020-02-25-single-point-of-contact</id>
    <link type="text/html" rel="alternate" href="https://regisfreyd.com/2020-02-25-single-point-of-contact" />
    <title>Have a single point of contact for your side project</title>
    <published>2020-02-25T00:00:00+00:00</published>
    <updated>2020-02-25T00:00:00+00:00</updated>
    <author>
        <name>Regis Freyd</name>
    </author>
    <summary type="html">When your side project gains traction, alongside with being flooded by feature requests, you will receive requests to open a Slack community, or a forum, or to have a newsletter, or to use GitHub issues, or to have a dedicated Twitter account. You will......</summary>
    <content type="html"><![CDATA[
        <p>When your side project gains traction, alongside with being flooded by feature requests, you will receive requests to open a Slack community, or a forum, or to have a newsletter, or to use GitHub issues, or to have a dedicated Twitter account. You will also be tempted to record every feature request — because, well, it’s tempting.</p>

<p>Don’t.</p>

<p>If you work on a side project, you will fight every minute of your life to find the time to work on it. You probably have a full-time job, a spouse and/or kids, friends and life in general. Finding 1 or 2 hours per day to work on your passion is tough, and precious.</p>

<p>Do you really want to spend this time maintaining a lot of channels to talk to your community? Don’t get me wrong: having a community around your project is essential. However, the cost of having too many official channels is enormous and drains a lot of attention and energy — energy that you will not spend on doing what you loved in the first place: working on the core of your side project. The more communication channels you have, the more people will /steal/ your time by flooding you with requests or support questions. And as you are kind, you will try to please them — but this is endless.</p>

<p>For your side project, keep one official channel of communication. It could be the GitHub issues of your project or your own Twitter account. That’s it. Communicate with your community through that channel. And focus on your product. When you will find more time to dedicate to it (because the project generates revenues for instance), you will be able to offer other forms of communication. This time will come. But for now, stay sane.</p>
    ]]></content>
</entry>
    </feed>
